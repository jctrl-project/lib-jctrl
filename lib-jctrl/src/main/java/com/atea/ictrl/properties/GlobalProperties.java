/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.atea.ictrl.properties;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Properties;

/**
 *
 * @author Martin
 */
public class GlobalProperties {
    private static Properties properties = new Properties();
    private static File file;
    public static void loadFromDisk(String filename) {
        try {
            file = new File(filename);
            FileInputStream fileIn = new FileInputStream(file);
            properties.load(fileIn);               
            fileIn.close();
            fileIn = null;            
        } catch (FileNotFoundException ex) {
            System.err.println("Error while reading property file: " + ex);
        } catch (IOException ex) {
            System.err.println("Error while reading property file: " + ex);
        }
    }
    public static void saveToDisk() {
        try {
            FileOutputStream propOut = new FileOutputStream(file);
            properties.store(propOut, "");
            propOut.close();
            propOut = null;
        } catch (Exception ex) {
            System.err.println("Error while saving property file: " + ex);
        }
    }
    public static void clear() {
        properties.clear();
    }
    public static String getProperty(String key) {
        return (String) properties.get(key);
    }
    public static boolean containsKey(String key) {
        return properties.containsKey(key);
    }
    public static boolean containsKeyMatchingValue(String key, String value) {
        for(int i=0;properties.containsKey(key + "_" + i);i++) {
            if(properties.getProperty(key + "_" + i).equals(value))
                return true;
        }
        return false;
    }
    public static ArrayList<String> getPropertySet(String key) {
        ArrayList<String> set = new ArrayList<String>();
        for(int i=0;properties.containsKey(key + "_" + i);i++) {
            set.add(properties.getProperty(key + "_" + i));
        }
        return set;
    }
    public static ArrayList<Boolean> getBooleanPropertySet(String key) {
        ArrayList<Boolean> set = new ArrayList<Boolean>();
        for(int i=0;properties.containsKey(key + "_" + i);i++) {
            set.add(Boolean.valueOf(properties.getProperty(key + "_" + i)));
        }
        return set;
    }
    public static ArrayList<Integer> getIntegerPropertySet(String key) {
        ArrayList<Integer> set = new ArrayList<Integer>();
        for(int i=0;properties.containsKey(key + "_" + i);i++) {
            set.add(Integer.valueOf(properties.getProperty(key + "_" + i)));
        }
        return set;
    }
    public static Boolean getBooleanProperty(String key) {
        return Boolean.valueOf(properties.getProperty(key));
    }
    public static Integer getIntegerProperty(String key) throws NumberFormatException {
        return Integer.valueOf(properties.getProperty(key));
    }
    public static void setProperty(String key, String value) {
        properties.setProperty(key, value);        
        
    }
    
    public static void clearAutoGenerated() {
        Properties p = new Properties();
        for(String s : properties.stringPropertyNames()) {
            if (!s.contains("ag_")) {
                p.setProperty(s, properties.getProperty(s));
            }
        }
        properties = p;
    }
    
    public static Properties getProperites() {
        return properties;
    }
    
    public static void setProperites(Properties p) {
        properties = p;
    }
    
}
